/*Baby Monitor Project
 * This sketch reads in a a sound such as a baby's cry.
 * It should read in the noise and compare it to the threshold.
 * If the noise is above the threshold level the light will turn on.
 * It will also output a message.
 * Once the noise goes below the threshold level the light will go off.


*/
 
#include <Bridge.h>
#include <Temboo.h>
#include "TembooAccount.h" // contains Temboo account information

#include <math.h>
#include <Wire.h>
#include "rgb_lcd.h"
int a; //thermistor value
float c;
int b = 3985;      //b value of the thermistor
float resistance;

const int colorR = 0;
const int colorG = 0;
const int colorB = 255;

rgb_lcd lcd;
 
/*** SUBSTITUTE YOUR VALUES BELOW: ***/
 
// Note that for additional security and reusability, you could
// use #define statements to specify these values in a .h file.
 
// your Gmail username, formatted as a complete email address, eg "bob.smith@gmail.com"
const String GMAIL_USER_NAME = "lyndakelly09@gmail.com";
 
// your Gmail password
const String GMAIL_PASSWORD = "PASSWORD";
 
// the email address you want to send the email to, eg "jane.doe@temboo.com"
const String TO_EMAIL_ADDRESS = "EMAIL";
 
boolean success = false; // a flag to indicate whether we've sent the email yet or not

// these constants won't change:
const int ledPin = 8;      // led connected to digital pin 8
const int noiseSensor = A0; // the piezo is connected to analog pin 0
const int threshold = 20;  // threshold value to decide when the the light turns on.


// these variables will change:
int sensorReading = 0;      // variable to store the value read from the sensor pin
int ledState = LOW;         // variable used to store the last LED status, to toggle the light
 
void setup() {
  Serial.begin(9600);
 
  // for debugging, wait until a serial console is connected
  delay(4000);
  while(!Serial);
 
  Bridge.begin();

  pinMode(ledPin, OUTPUT); // declare the ledPin as as OUTPUT
  Serial.begin(9600);       // use the serial port
}
 
void loop()
{
  // read the sensor and store it in the variable sensorReading:
  sensorReading = analogRead(noiseSensor);

  // if the sensor reading is greater than the threshold:
  if (sensorReading >= threshold) {
    // toggle the status of the ledPin:
    ledState = !ledState;
    // update the LED pin itself:
    digitalWrite(ledPin, HIGH);
    // send the string "Shush!" back to the computer, followed by newline
    Serial.println("Shush!");
   
  // only try to send the email if we haven't already sent it successfully
  if (!success) {
 
    Serial.println("Running SendAnEmail...");
 
    TembooChoreo SendEmailChoreo;
 
    // invoke the Temboo client
    // NOTE that the client must be reinvoked, and repopulated with
    // appropriate arguments, each time its run() method is called.
    SendEmailChoreo.begin();
 
    // set Temboo account credentials
    SendEmailChoreo.setAccountName("foxinthebox97");
    SendEmailChoreo.setAppKeyName("myFirstApp");
    SendEmailChoreo.setAppKey("KEY");
 
    // identify the Temboo Library choreo to run (Google > Gmail > SendEmail)
    SendEmailChoreo.setChoreo("/Library/Google/Gmail/SendEmail");
 
    // set the required choreo inputs
    // see https://www.temboo.com/library/Library/Google/Gmail/SendEmail/ 
    // for complete details about the inputs for this Choreo
 
    // the first input is your Gmail email address
    SendEmailChoreo.addInput("Username", "EMAIL");
    // next is your Gmail password.
    SendEmailChoreo.addInput("Password","PASSWORD");
    // who to send the email to
    SendEmailChoreo.addInput("ToAddress", "ADDRESS");
    // then a subject line
    SendEmailChoreo.addInput("Subject","Baby Crying!");
 
     // next comes the message body, the main content of the email   
    SendEmailChoreo.addInput("MessageBody", "Baby Crying!");
 
    // tell the Choreo to run and wait for the results. The 
    // return code (returnCode) will tell us whether the Temboo client 
    // was able to send our request to the Temboo servers
    unsigned int returnCode = SendEmailChoreo.run();
 
    // a return code of zero (0) means everything worked
    if (returnCode == 0) {
        Serial.println("Success! Email sent!");
        success = true;
    } else {
      // a non-zero return code means there was an error
      // read and print the error message
      while (SendEmailChoreo.available()) {
        char c = SendEmailChoreo.read();
        Serial.print(c);
      }
    } 
    SendEmailChoreo.close();
 
    // do nothing for the next 60 seconds
    delay(60000);
    
  a = analogRead(0); //find the original reading of the thermistor
  resistance = (float)(1023 - a) * 10000 / a; //get the resistance of the sensor;
  c = 1 / (log(resistance / 10000) / b + 1 / 298.15) - 273.15; //convert to Celsius via datasheet&nbsp;;
  int f = (c*(9/5)+32);//convert to F (delete if you want C)
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("temperature is:");
  lcd.setCursor(0,1);
  lcd.print(f);//print the F temp on the lcd screen (change to: lcd.print(c); if you want C)
  lcd.print("f");//change to lcd.print("c"); if you want C
  delay(1000);//wait 1 second

  }
  }

  delay(100);  // delay to avoid overloading the serial port buffer
}
